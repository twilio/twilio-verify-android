@startuml Security

interface Crypto.Key.Signer.Authenticator {
    startAuthentication(signatureObjectForSigning: Signature, success: (Signature) -> (), error: (Exception) -> ())
}
interface Crypto.Key.Signer.Signer {
    sign(data: byte[]) : byte[]
    sign(data: byte[], authenticator: Authenticator, success: (ByteArray) -> (), error: (KeyException) -> ())
    verify(data: byte[], signature: byte[]): Boolean
    getPublic(): byte[]
}
interface Crypto.Key.Encrypter.Encrypter {
    encrypt(data: byte[]): byte[]
    decrypt(data: byte[]): byte[]
}
class Crypto.Key.Signer.ECSigner implements Crypto.Key.Signer.Signer {
   keyPair : KeyPair
   signatureAlgorithm: String
}
class Crypto.Key.Encrypter.AESEncrypter implements Crypto.Key.Encrypter.Encrypter {
    key: Key
    val cipherAlgorithm: String
}
interface Crypto.Key.Template.Template {
    alias: String
    algorithm : String
}
interface Crypto.Key.Template.SignerTemplate implements Crypto.Key.Template.Template {
    signatureAlgorithm: String
    authenticationRequired: Boolean
}
class Crypto.Key.Template.ECP256SignerTemplate implements Crypto.Key.Template.SignerTemplate {
    shouldExist: Boolean
}
interface Crypto.Key.Template.EncrypterTemplate extends Crypto.Key.Template.Template{
    cipherAlgorithm: String
}
interface Crypto.KeyManager {
    signer(template: Crypto.Key.Template.SignerTemplate): Crypto.Key.Signer.Signer
    encrypter(template: Crypto.Key.Template.EncrypterTemplate): Crypto.Key.Encrypter.Encrypter
    delete(alias: String)
}
class Crypto.KeyException {
    message: String
    cause: Exception
}
class Crypto.AndroidKeyManager implements Crypto.KeyManager {
    keyStore: KeyStore
}


interface Storage.SecretKeyProvider {
    encrypterTemplate: Crypto.Key.Template.EncrypterTemplate
    encrypt(data: byte[]): byte[]
    decrypt(data: byte[]): byte[]
    delete()
}
interface Storage.EncryptedStorage {
    put(key: String, value: String) throws StorageException
    get(key: String): String throws StorageException
    getAll(): Map<String, String>
    contains(key: String): Boolean
    remove(key: String)
    clear()
}
' Desktop
class Storage.MasterKeyManager implements Crypto.KeyManager {

}
Storage.SecretKeyProvider --> Storage.MasterKeyManager: for desktop
Storage.SecretKeyProvider --> Crypto.AndroidKeyManager: for android/ios
Storage.EncryptedStorage --> Storage.SecretKeyProvider
Crypto.KeysManager --> Storage.EncryptedStorage: for desktop
@enduml