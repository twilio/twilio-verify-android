@startuml Create push factor
enum Models.FactorType {
    push
}
interface Models.Factor {
    sid: String
    friendlyName: String
    accountSid: String
    serviceSid: String
    entitySid: String
    entityId: String
    type: FactorType
}
class Domain.Factor.Models.PushFactor implements Models.Factor {
    keyPairAlias: String
}
class Domain.Factor.Models.FactorBuilder {
    friendlyName: String
    type: FactorType
    binding: Dictionary
    serviceSid: String
    entityId: String
}
class Domain.Factor.FactorMapper {
    fromApi(jsonObject: JSONObject, factorBuilder: FactorBuilder): Factor?
    fromStorage(json: String): Factor?
    toJSON(factor: Factor): String
}
class API.FactorAPIClient {
    create(factorBuilder: FactorBuilder, success: (JSONObject)->(), error: ()->())
    verify(factor: Factor, authPayload: String, success: ()->(), error: ()->())
}
class Network.NetworkAdapter implements Network.NetworkProvider {

}
interface Data.StorageProvider {
    save(key: String, value: Object)
}
class Data.Storage implements Data.StorageProvider {

}
interface Data.KeyStorage {
    create(alias: String): String?
    sign(alias: String, message: String): String?
}
class Data.KeyStoreAdapter implements Data.KeyStorage {

}
interface Domain.Factor.FactorProvider {
    create(factorBuilder: FactorBuilder, success: (Factor?)->())
    get(sid: String): Factor?
    update(factor: Factor): Factor?
    verify(factor: Factor, authPayload: String, success: ()->())
}
class Domain.Factor.FactorRepository implements Domain.Factor.FactorProvider {

}
class Domain.Factor.PushFactory {
    create(jwt: String, friendlyName: String, pushToken: String, success: (Factor?)->())
}
Domain.Factor.PushFactory o-left-> Data.KeyStorage: create key pair
Domain.Factor.PushFactory o--> Domain.Factor.FactorProvider: create/update factor
Domain.Factor.FactorRepository o-left-> Data.StorageProvider: save factor
Domain.Factor.FactorRepository o-right-> API.FactorAPIClient: create factor
Domain.Factor.FactorRepository o--> Domain.Factor.FactorMapper: map response
API.FactorAPIClient o-right-> Network.NetworkProvider: call endpoint
@enduml