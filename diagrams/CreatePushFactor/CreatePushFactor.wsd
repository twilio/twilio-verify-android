@startuml Create push factor
enum Models.FactorType {
    push
}
enum Models.FactorStatus {
    Verified("verified"),
    Unverified("unverified")
}
interface Models.Factor {
    sid: String
    friendlyName: String
    accountSid: String
    serviceSid: String
    entityIdentity: String
    type: FactorType
    status: FactorStatus
}
class Domain.Factor.Models.PushFactor implements Models.Factor {
    keyPairAlias: String?
    entitySid: String
}
class Domain.Factor.Models.FactorPayload {
    friendlyName: String
    type: FactorType
    binding: Dictionary
    serviceSid: String
    entity: String
}
class Domain.Factor.FactorMapper {
    fromApi(jsonObject: JSONObject, factorPayload: FactorPayload): Factor
    fromStorage(json: String): Factor
    toJSON(factor: Factor): String
    status(jsonObject: JSONObject): FactorStatus
}
class API.FactorAPIClient {
    create(factorPayload: FactorPayload, success: (JSONObject)->(), error: (TwilioVerifyException)->())
    verify(factor: Factor, authPayload: String, success: (JSONObject)->(), error: (TwilioVerifyException)->())
}
class Network.NetworkAdapter implements Network.NetworkProvider {

}
interface Data.StorageProvider {
    save(key: String, value: Object)
    get(key: String): Object?
}
class Data.Storage implements Data.StorageProvider {

}
interface Data.KeyStorage {
    create(alias: String): String
    signAndEncode(alias: String, message: String): String
    sign(alias: String, message: String): byte[]
}
class Data.KeyStoreAdapter implements Data.KeyStorage {

}
interface Domain.Factor.FactorProvider {
    create(factorPayload: FactorPayload, success: (Factor?)->(), error: (TwilioVerifyException)->())
    get(sid: String): Factor?
    update(factor: Factor): Factor?
    verify(factor: Factor, payload: String, success: (Factor)->(), error: (TwilioVerifyException)->())
}
class Domain.Factor.FactorRepository implements Domain.Factor.FactorProvider {

}
class Domain.Factor.PushFactory {
    create(jwt: String, friendlyName: String, pushToken: String, success: (Factor)->(), error: (TwilioVerifyException)->())
    verify(sid: String, verificationCode: String, success: (Factor)->(), error: (TwilioVerifyException)->())
}
Domain.Factor.PushFactory o-left-> Data.KeyStorage: create key pair
Domain.Factor.PushFactory o--> Domain.Factor.FactorProvider: create/update factor
Domain.Factor.FactorRepository o-left-> Data.StorageProvider: save factor
Domain.Factor.FactorRepository o-right-> API.FactorAPIClient: create factor
Domain.Factor.FactorRepository o--> Domain.Factor.FactorMapper: map response
API.FactorAPIClient o-right-> Network.NetworkProvider: call endpoint
@enduml