@startuml TwilioVerifySDK
interface TwilioVerify {
    createFactor(factorInput: FactorInput, success: (Factor) -> (), error: (TwilioVerifyException)->())
    verifyFactor(verifyFactorInput: VerifyFactorInput, success: (Factor) -> (), error: (TwilioVerifyException)->())
    getChallenge(challengeSid: String, factorSid: String, success: (Challenge) -> (), error: (TwilioVerifyException)->())
    updateChallenge(updateChallengeInput: UpdateChallengeInput, success: () -> (), error: (TwilioVerifyException)->())
}
class TwilioVerify.Builder {
         authorization: Authorization
         context: Context
         networkProvider: NetworkProvider
         build(): TwilioVerify
    }
class Domain.TwilioVerifyManager implements TwilioVerify {
    
}
class Domain.Factor.FactorFacade {
    createFactor(factorInput: FactorInput, success: (Factor) -> (), error: (TwilioVerifyException)->())
    verifyFactor(verifyFactorInput: VerifyFactorInput, success: (Factor) -> (), error: (TwilioVerifyException)->())
    getFactor(factorSid: String, success: (Factor) -> (), error: (TwilioVerifyException)->())
}
class Domain.Challenge.ChallengeFacade {
    getChallenge(sid: String, factorSid: String, success: (Challenge)->(), error: (TwilioVerifyException)->())
    updateChallenge(updateChallengeInput: UpdateChallengeInput, success: ()->(), error: (TwilioVerifyException)->())
}
interface FactorInput {
    friendlyName: String
}
class PushFactorInput implements FactorInput {
    pushToken: String
    enrollmentJwe: String
}
interface VerifyFactorInput {
    sid: String
}
interface UpdateChallengeInput {
    challengeSid: String
    factorSid: String
    status: ChallengeStatus
}

class VerifyPushFactorInput implements VerifyFactorInput {
    verificationCode: String
}
class UpdatePushChallengeInput implements UpdateChallengeInput {
    
}

class TwilioVerifyException extends Exception {
    cause: Exception
    errorCode: ErrorCode
}
enum TwilioVerifyException.ErrorCodes {
        NetworkError
    }
class NetworkException {
    statusCode: Int
    errorBody: String?
}
Domain.TwilioVerifyManager o--> Domain.Factor.FactorFacade: create factor
Domain.TwilioVerifyManager o--> Domain.Challenge.ChallengeFacade: get/update challenge
Domain.Factor.FactorFacade o--> Domain.Factor.PushFactory: create push factor
Domain.Challenge.ChallengeFacade o--> Domain.Challenge.PushChallengeProcessor: get/update challenge
Domain.Challenge.ChallengeFacade o--> Domain.Factor.FactorFacade: get factor
Domain.Factor.FactorFacade o--> Domain.Factor.FactorProvider: get factor
@enduml