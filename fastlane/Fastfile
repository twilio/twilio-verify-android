# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

output_directory = './fastlane/Test Output/'
coverage_directory = '/coverage'

default_platform(:android)

platform :android do

  desc "Assemble build"
  lane :assemble do
    gradle(
      tasks: ["assembleDebug", "assembleDebugAndroidTest", ":security::assembleDebugAndroidTest"]
    )
  end
  
  desc "Runs all the tests with coverage"
  lane :unit_tests do
    gradle(
      tasks: ["jacocoTestReport", ":verify:jacocoCoverageVerification"]
    )
  end

  desc "Size impact report"
  lane :sdk_sizer do
    gradle(
      task: "generateSizeReport"
    )
  end

  desc "Generates release tag, release notes and updates CHANGELOG.md"
  lane :post_deploy do
    #is_releaseable = analyze_commits(
    #    match: "*",
    #    releases: {
    #      fix: 'patch',
    #      feat: 'minor',
    #      'BREAKING CHANGE': 'major'
    #    }
    #)
    #is_releaseable = analyze_commits(match: "*")
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    notes = conventional_changelog(
      format: 'markdown', 
      commit_url: 'https://github.com/twilio/twilio-verify-android/commit')
    tag = next_version
    UI.important(notes)
    add_git_tag(tag: tag)
    push_git_tags(tag: tag)

    set_github_release(
      repository_name: "twilio/twilio-verify-android",
      api_token: ENV["GH_TOKEN"],
      name: tag,
      tag_name: tag,
      description: notes,
      is_prerelease: true,
      commitish: "main"
    )

   sh("echo '#{notes}\\n' | cat - ../CHANGELOG.md > temp && mv temp ../CHANGELOG.md")
  end

  desc "test"
  lane :sergio do
  is_releaseable = analyze_commits(
          match: "*",
          releases: {
            fix: 'patch',
            feat: 'minor',
            'BREAKING CHANGE': 'major'
          }
      )
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    puts(next_version)
    gradle(task: "-q :verify:incrementVersion", properties: { 'version_number' => next_version })
  end

  desc "Verify next release"
    lane :verify do |options|
      # Git status has to be clean
      ensure_git_status_clean
      # if the build is run on local machine
      if !is_ci? then
        # it sends slack message about the deploy was triggered
        # slack(message: "#{title} deploy was triggered on local machine")
        UI.message("#{options[:title]} deploy was triggered on local machine")
        # Clean project
        gradle(task: "clean")
        # yarn lint && yarn jest && yarn flow
        # check_code_quality
      else
        # We don't need to do this on CI because repo is fresh
        # slack(message: "#{options[:title]} deploy was triggered on CircleCI")
        UI.message("#{options[:title]} deploy was triggered on CircleCI")
      end

      # Check if there is any change since last version
      is_releaseable = analyze_commits(
        match: options[:tag_prefix],
        releases: {
          fix: 'patch',
          feat: 'minor',
          'BREAKING CHANGE': 'major'
        }
      )

      unless is_releaseable
        # slack(message: "Skip deploying #{options[:title]}. No changes since last one!")
        UI.important("Skip deploying #{options[:title]}. No changes since last one!")
      end

      is_releaseable
    end

    desc "Build a new production version"
      lane :release do |options|
        title = 'Android Release'
        tag_prefix = '*'
        next unless verify(title: title, tag_prefix: tag_prefix)

        build(flavor: app_flavor)

        post_deploy()
      end


      desc "Build an android release"
        lane :build do |options|
          next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
          ensure_git_status_clean
          # Increment version in Android project
          gradle(task: "-q :verify:incrementVersion", properties: { 'version_number' => next_version })
          # Build app
          #gradle(task: "bundle", flavor: options[:flavor], build_type: 'Release')
          # Return new version code
          #version_code.lines.last.to_i
        end

end
