# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

output_directory = './fastlane/Test Output/'
coverage_directory = '/coverage'

default_platform(:android)

platform :android do

  desc "Assemble build"
  lane :assemble do
    gradle(
      tasks: ["assembleDebug", "assembleDebugAndroidTest", ":security::assembleDebugAndroidTest"]
    )
  end
  
  desc "Runs all the tests with coverage"
  lane :unit_tests do
    gradle(
      tasks: ["jacocoTestReport", ":verify:jacocoCoverageVerification"]
    )
  end

  desc "Size impact report"
  lane :sdk_sizer do
    gradle(
      task: "generateSizeReport"
    )
  end

  desc "Check android, kotlin style convention"
  lane :lint_checker do
    gradle(
      tasks: ["ktlint", ":verify:lint", ":security:lint"]
    )
  end

  desc "Release a new production version"
  lane :release do
    title = 'Android Verify Push Release'
    tag_prefix = '*'
    next unless verify(title: title, tag_prefix: tag_prefix)
    increment_version()
    UI.message("Releasing to Bintray")
    gradle(task: ":verify:bintrayLibraryReleaseUpload")
    latest_docs()
    post_release()
  end

  desc "Verify next release"
  lane :verify do |options|
    ensure_git_status_clean
    if !is_ci? then
      UI.message("#{options[:title]} deploy was triggered on local machine")
      gradle(task: "clean")
    else
      UI.message("#{options[:title]} deploy was triggered on CircleCI")
    end

    # Check if there is any change since last version
    is_releaseable = analyze_commits(
      match: options[:tag_prefix]
    )
    unless is_releaseable
      UI.important("Skip deploying #{options[:title]}. No changes since last one!")
    end
    is_releaseable
  end

  desc "Generates latest API doc"
  lane :latest_docs do
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    UI.message("Generating latest API docs redirect for version #{next_version}")
    sh("ln -nsf #{next_version} ../docs/latest")
  end

  desc "Increment version"
  lane :increment_version do |options|
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    ensure_git_status_clean
    # Increment version in Verify module
    UI.message("Updating verify/gradle.properties")
    gradle(task: "-q :verify:incrementVersion", properties: { 'version_number' => next_version })
  end

  desc "Generates release tag, release notes and updates CHANGELOG.md"
  lane :post_release do
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    notes = conventional_changelog(
      format: 'markdown',
      commit_url: 'https://github.com/twilio/twilio-verify-android/commit')
    tag = next_version
    UI.important(notes)
    add_git_tag(tag: tag)
    push_git_tags(tag: tag)

    UI.message("Updating CHANGELOG.md")
    sdk_size = sh("cat ../builds/sizeReport/TwilioVerifySizeImpactReport.txt")
    changelog = "#{notes}\\n\\n#{sdk_size}"
    sh("echo \"#{changelog}\\n\" | cat - ../CHANGELOG.md > temp && mv temp ../CHANGELOG.md")
    git_add(path: ["./verify/gradle.properties", "./CHANGELOG.md", "./docs/#{next_version}", "./docs/latest"])
    sh("git commit -m \"Version bump to #{next_version} [skip ci]\"")
    push_to_git_remote

    set_github_release(
      repository_name: "twilio/twilio-verify-android",
      api_token: ENV["GH_TOKEN"],
      name: tag,
      tag_name: tag,
      description: notes,
      commitish: "main"
    )
    plain_notes = conventional_changelog(
             format: 'plain',
             commit_url: 'https://github.com/twilio/twilio-verify-android/commit')
    distribute_sample_app(notes: plain_notes, build_type: "Release", url: ENV["PROD_URL"], versionName: next_version)
  end

  desc "Danger check"
  lane :danger_check do
    danger(
      danger_id: 'Linter',
      dangerfile: 'Dangerfile',
      github_api_token: ENV["GH_TOKEN"],
      remove_previous_comments: true,
      fail_on_errors: true,
      verbose: true
    )
  end

  desc "Distribute sample app debug mode for internal testing"
  lane :distribute_debug_sample_app do |options|
   env = options[:env]
   url = options[:url]
   title = "Android Verify Push #{env}"
   tag_prefix = '*'
   verify(title: title, tag_prefix: tag_prefix)
   next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
   plain_notes = conventional_changelog(
            format: 'plain',
            commit_url: 'https://github.com/twilio/twilio-verify-android/commit')
   dev_url = ENV["DEV_URL"]
   email = ENV["EMAIL"]
   UI.important("Sergio")
   UI.important(dev_url)
   UI.important(email)
   distribute_sample_app(notes: plain_notes, build_type: "Debug", url: dev_url, versionName: "#{next_version}-#{env}")
  end

  desc "Distribute sample app for internal testing"
  lane :distribute_sample_app do |options|
    app_distribution_key = "gcloud-app-distribution-service-key.json"
    key_file = "#{ENV["HOME"]}/#{app_distribution_key}"
    build_android_app(
      properties: {
        "baseURL" => options[:url],
        "verifyVersionName" => options[:versionName]
      },
      task: "assemble",
      build_type: options[:build_type]
    )
    path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    firebase_app_distribution(
      app: "1:116450802435:android:df6d5c263506bb20728736",
      apk_path: path,
      groups: "qa-team",
      service_credentials_file: key_file,
      release_notes: options[:notes]
    )
  end
end
