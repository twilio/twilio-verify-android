# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

output_directory = './fastlane/Test Output/'
coverage_directory = '/coverage'

default_platform(:android)

platform :android do

  desc "Assemble build"
  lane :assemble do
    gradle(
      tasks: ["assembleDebug", "assembleDebugAndroidTest", ":security::assembleDebugAndroidTest"]
    )
  end
  
  desc "Runs all the tests with coverage"
  lane :unit_tests do
    gradle(
      tasks: ["jacocoTestReport", ":verify:jacocoCoverageVerification"]
    )
  end

  desc "Size impact report"
  lane :sdk_sizer do
    gradle(
      task: "generateSizeReport"
    )
  end

  desc "Check android, kotlin and java style convention"
  lane :lint_checker do
    gradle(
      tasks: ["ktlint", ":verify:lint", ":security:lint", "spotlessCheck"]
    )
  end

  desc "Release a new production version"
  lane :release do
    title = 'Android Verify Push Release'
    tag_prefix = '*'
    next unless verify(title: title, tag_prefix: tag_prefix)
    incrementVersion()
    # TODO: missing part generate api docs and release to bintray
    post_release()
  end

  desc "Verify next release"
    lane :verify do |options|
      ensure_git_status_clean
      if !is_ci? then
        UI.message("#{options[:title]} deploy was triggered on local machine")
        gradle(task: "clean")
      else
        UI.message("#{options[:title]} deploy was triggered on CircleCI")
      end

      # Check if there is any change since last version
      is_releaseable = analyze_commits(
        match: options[:tag_prefix]
      )
      unless is_releaseable
        UI.important("Skip deploying #{options[:title]}. No changes since last one!")
      end
      is_releaseable
    end

  desc "Generates release tag, release notes and updates CHANGELOG.md"
  lane :post_release do
     next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    notes = conventional_changelog(
      format: 'markdown', 
      commit_url: 'https://github.com/twilio/twilio-verify-android/commit')
    tag = next_version
    UI.important(notes)
    add_git_tag(tag: tag)
    push_git_tags(tag: tag)

    set_github_release(
      repository_name: "twilio/twilio-verify-android",
      api_token: ENV["GH_TOKEN"],
      name: tag,
      tag_name: tag,
      description: notes,
      commitish: "main"
    )
    UI.message("Updating CHANGELOG.md")
    sh("echo '#{notes}\\n' | cat - ../CHANGELOG.md > temp && mv temp ../CHANGELOG.md")
    git_commit(path: ['./verify/gradle.properties', './CHANGELOG.md'], message: "Version bump to #{next_version} [skip ci]")
    push_to_git_remote
  end
  
  desc "Increment version"
  lane :incrementVersion do |options|
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    ensure_git_status_clean
    # Increment version in Verify module
    UI.message("Updating verify/gradle.properties")
    gradle(task: "-q :verify:incrementVersion", properties: { 'version_number' => next_version })
  end

end
