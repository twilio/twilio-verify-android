# adder: {}
# calculator: {}
# commands:
    
# description: |
#     Upload your coverage reports to Codecov without dealing with complex configurations. This orb helps you get coverage results quickly so that you can breathe easier and commit your code with confidence.
# display:
#     home_url: https://codecov.io/
#     source_url: https://github.com/codecov/codecov-circleci-orb
# subtractor: {}


version: 2.1

orbs:
 android: circleci/android@0.2.0
 codecov: codecov/codecov@1.0.2

references:
  workspace: &workspace
    .

  executor: &executor
    android/android

  ## Cache
  gradle_key: &gradle_key
    jars-{{ checksum "build.gradle.kts" }}-{{ checksum "verify/build.gradle.kts" }}-{{ checksum "security/build.gradle.kts" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      key: *gradle_key
      paths:
        - ~/.gradle

  ## Build
  decrypt_google_services: &decrypt_google_services
    run:
      name: Decrypt SampleApp Google Services
      command: cd sample; ./add_google_services_file $GOOGLE_SERVICES_KEY $GOOGLE_SERVICES_IV

  assemble_build: &assemble_build
    run:
      name: Assemble Build
      command: bundle exec fastlane assemble

  #Firebase Test Lab
  store_google_service_account: &store_google_service_account
    run:
      name: Store Google Service Account
      command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

  authorize_gcloud: &authorize_gcloud
    run:
      name: Authorize gcloud and set config defaults
      command: |
        sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        sudo gcloud --quiet config set project twilio-firebase-266721
commands:
  setup:
    steps:
      - checkout
      - restore_cache:
          key: v1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Gems
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: v1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  move_directory:
    parameters:
      from:
        description: directory to move
        type: string
      to:
        description: destination directory
        type: string
    steps:
      - run: cp -R <<parameters.from>> <<parameters.to>>
  upload_codecov:
    parameters:
      file:
        default: ""
        description: Path to the code coverage data file to upload.
        type: string
      flags:
        default: ""
        description: Flag the upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
        type: string
      token:
        default: ${CODECOV_TOKEN}
        description: Set the private repository token as the value of the variable CODECOV_TOKEN using CircleCI Environment Variables.
        type: string
      upload_name:
        default: ${CIRCLE_BUILD_NUM}
        description: Custom defined name of the upload. Visible in Codecov UI
        type: string
      url:
        default: https://codecov.io/bash
        description: Custom url to submit the codecov result. Default to "https://codecov.io/bash"
        type: string
      when:
        default: always
        description: When should this step run?
        type: string
    steps:
      - when:
          condition: << parameters.file >>
          steps:
            - run:
                command: |
                    curl -s << parameters.url >> | bash -s -- \
                      -f "<< parameters.file >>" \
                      -t "<< parameters.token >>" \
                      -n "<< parameters.upload_name >>" \
                      -F "<< parameters.flags >>" \
                      -Z || echo 'Codecov upload failed'
                name: Upload Coverage Results
                when: << parameters.when >>
      - unless:
          condition: << parameters.file >>
          steps:
            - run:
                command: |
                    curl -s << parameters.url >> | bash -s -- \
                      -t "<< parameters.token >>" \
                      -n "<< parameters.upload_name >>" \
                      -F "<< parameters.flags >>" \
                      -Z || echo 'Codecov upload failed'
                name: Upload Coverage Results
                when: << parameters.when >>       
jobs:
  assemble_build:
    executor: *executor
    steps:
      - setup
      - *restore_gradle_cache
      - *decrypt_google_services
      - *assemble_build
      - *save_gradle_cache
      - run: mkdir -p builds
      - run: cp verify/build/outputs/apk/androidTest/debug/verify-debug-androidTest.apk builds
      - run: cp security/build/outputs/apk/androidTest/debug/security-debug-androidTest.apk builds
      - persist_to_workspace:
          root: *workspace
          paths:
            - builds
  unit_tests:
    executor: *executor
    steps:
      - setup
      - *restore_gradle_cache
      - *decrypt_google_services
      - run:
          name: Running Unit Tests
          command: bundle exec fastlane unit_tests
      - *save_gradle_cache
      - store_artifacts:
          path: "verify/build/reports"
          destination: verify-test-coverage
      - store_artifacts:
          path: "sample/build/reports"
          destination: sampleapp-test-coverage
      - store_artifacts:
          path: "security/build/reports"
          destination: security-test-coverage
      - run: mkdir -p test-results
      - move_directory:
          from: verify/build/test-results/testDebugUnitTest/
          to: test-results/verify
      - move_directory:
          from: sample/build/test-results/testDebugUnitTest/
          to: test-results/sampleapp
      - move_directory:
          from: security/build/test-results/testDebugUnitTest/
          to: test-results/security
      - store_test_results:
          path: "test-results"
      - upload_codecov:
          file: verify/build/reports/code-coverage/xml
          flags: unittests
  security_instrumentation_tests_single_device:
    executor: *executor
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - *store_google_service_account
      - *authorize_gcloud
      - run:
          name: Run security integration tests on single device
          command: 
            sudo gcloud firebase test android run --project twilio-firebase-266721 --type instrumentation --app ftl/dummy.apk --test builds/security-debug-androidTest.apk --device model=blueline,version=28,locale=en,orientation=portrait
  verify_instrumentation_tests_single_device:
    executor: *executor
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - *store_google_service_account
      - *authorize_gcloud
      - run:
          name: Run verify integration tests on single device
          command: 
            sudo gcloud firebase test android run --project twilio-firebase-266721 --type instrumentation --app ftl/dummy.apk --test builds/verify-debug-androidTest.apk --device model=blueline,version=28,locale=en,orientation=portrait
  security_instrumentation_tests_multiple_devices:
    executor: *executor
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - *store_google_service_account
      - *authorize_gcloud
      - run:
          name: Replace ftl yaml build values
          command: sed -i -e 's/{{test_build}}/builds\/security-debug-androidTest.apk/g' ftl/security-ftl-config.yaml
      - run:
          name: Run security integration tests on multiple devices
          command:
            sudo gcloud firebase test android run --project twilio-firebase-266721 ftl/security-ftl-config.yaml:twilio-security-tests
  verify_instrumentation_tests_multiple_devices:
    executor: *executor
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - *store_google_service_account
      - *authorize_gcloud
      - run:
          name: Replace ftl yaml build values
          command: sed -i -e 's/{{test_build}}/builds\/verify-debug-androidTest.apk/g' ftl/verify-ftl-config.yaml
      - run:
          name: Run verify integration tests on multiple devices
          command:
            sudo gcloud firebase test android run --project twilio-firebase-266721 ftl/verify-ftl-config.yaml:twilio-verify-tests

workflows:
  version: 2

  workflow:
    jobs:
      - assemble_build
      - unit_tests:
          requires:
            - assemble_build
      - security_instrumentation_tests_single_device:
          requires:
            - unit_tests
      - verify_instrumentation_tests_single_device:
          requires:
            - unit_tests
      - security_instrumentation_tests_multiple_devices:
          requires:
            - security_instrumentation_tests_single_device
      - verify_instrumentation_tests_multiple_devices:
          requires:
            - verify_instrumentation_tests_single_device